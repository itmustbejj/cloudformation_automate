AWSTemplateFormatVersion: '2010-09-09'
Description: Cloudformation Backendless Chef v1.0

Parameters:
  LoadBalancerSubnets:
    Description: Provide a list of Subnet IDs for the ELB
    Type: List<AWS::EC2::Subnet::Id>
  ChefServerSubnets:
    Description: Provide a list of Subnet IDs for the Chef Servers (must be behind a NAT gateway)
    Type: List<AWS::EC2::Subnet::Id>
  NatGatewayIPs:
    Description: The NAT gateway IP associated with the chef server subnets required for ElasticSearch Access
    Type: CommaDelimitedList
  DBPassword:
    Description: Enter DB Password
    NoEcho: true
    Type: String
  DBPort:
    Default: '5432'
    Description: Enter DB Port
    Type: String
  DBUser:
    Description: Enter DB User Name
    Default: 'chefadmin'
    Type: String
  DBName:
    Description: Enter DB Name
    Default: 'chef'
    Type: String
  DBAllocatedStorage:
    Description: Storage size allocated for the database
    Default: '100'
    Type: String
  DBIops:
    Description: IOPS allocated to the storage (storage size * 10)
    Default: '1000'
    Type: String
  DBInstanceClass:
    Description: Storage size allocated for the database
    Default: 'db.m4.large'
    Type: String
  DBSubnetGroupArn:
    Description: Provide a DB Subnet Group ARN (or leave blank to have one created for you)
    Default: ''
    Type: String
  ElasticSearchShardCount:
    Description: Number of ElasticSearch hosts to provision at launch (3 recommended)
    Default: 3
    Type: Number
  ElasticSearchReplicaCount:
    Description: Replication factor for ElasticSearch shards (how many extra copies to keep)
    Default: 2
    Type: Number
  InstanceType:
    ConstraintDescription: must be a valid EC2 instance type.
    Default: c4.large
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
  LicenseCount:
    Default: '25'
    Description: Enter how many licenses you have purchased
    Type: String
  SSHSecurityGroup:
    Description: Select Security Group for SSH Access
    Type: AWS::EC2::SecurityGroup::Id
  SSLCertificateARN:
    Default: 'arn:aws:iam::'
    Description: SSL Certficate ARN for SSL Certficate
    Type: String
  VPC:
    Description: Choose VPC to use
    Type: AWS::EC2::VPC::Id
  DisableSignup:
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'false'
    Description: Allow users to sign themselves up to the chef server? (enter true or false)
    Type: String
  ChefServerIamRole:
    Description: Supply an IAM Role for the Chef Servers (leave blank to have it created for you). NOTE If you supply your own role, you must also provide an S3 Bucket which that role can access
    Type: String
    Default: ''
  ChefSecretsBucket:
    Description: Supply an S3 Bucket name for the Chef Servers to read/write config files to (leave blank to have it created for you)
    Type: String
    Default: ''
  ContactDept:
    Description: Contact department for billing purposes
    Type: String
  ContactEmail:
    Description: Contact email for Cloudwatch notifications and instance tagging
    Type: String

Conditions:
  CreateChefServerIamRole:
    !Equals [ !Ref ChefServerIamRole, '' ]
  CreateChefSecretsBucket:
    !Equals [ !Ref ChefSecretsBucket, '' ]
  CreateDBSubnetGroup:
    !Equals [ !Ref DBSubnetGroupArn, '' ]

Mappings:
  AWSRegion2AMI:
    us-east-1:
      centos: ami-a88c47be
    us-west-1:
      centos: ami-f0481790
    us-west-2:
      centos: ami-6bb7310b

Resources:
  # The first chef server we launch is the 'bootstrap' which needs to come up first and set schema before the rest
  BootstrapAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - DBPostgres
      - ElasticsearchDomain
    Properties:
      AvailabilityZones: {"Fn::GetAZs": ""}
      LaunchConfigurationName: !Ref ServerLaunchConfig
      LoadBalancerNames:
      - !Ref PrimaryElasticLoadBalancer
      MaxSize: '1'
      MinSize: '1'
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-bootstrap-frontend
        PropagateAtLaunch: true
      - Key: X-Dept
        Value: !Ref ContactDept
        PropagateAtLaunch: true
      - Key: X-Contact
        Value: !Ref ContactEmail
        PropagateAtLaunch: true
      VPCZoneIdentifier: !Ref ChefServerSubnets

  FrontendAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - BootstrapAutoScaleGroup
      - WaitCondition
    Properties:
      AvailabilityZones: {"Fn::GetAZs": ""}
      LaunchConfigurationName: !Ref ServerLaunchConfig
      LoadBalancerNames:
      - !Ref PrimaryElasticLoadBalancer
      MaxSize: '3'
      MinSize: '1'
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-frontend
        PropagateAtLaunch: true
      - Key: X-Dept
        Value: success
        PropagateAtLaunch: true
      - Key: X-Contact
        Value: !Ref ContactEmail
        PropagateAtLaunch: true
      VPCZoneIdentifier: !Ref ChefServerSubnets

  FrontendAutoScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref FrontendAutoScaleGroup
      Cooldown: 60
      ScalingAdjustment: 1

  FrontendAutoScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref FrontendAutoScaleGroup
      Cooldown: 60
      ScalingAdjustment: -1

  ChefBucket:
    Condition: CreateChefSecretsBucket
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private

  ChefInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !If [CreateChefServerIamRole, !Ref ChefRole, !Ref ChefServerIamRole]

  ChefRole:
    Condition: CreateChefServerIamRole
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /

  RolePolicies:
    Condition: CreateChefServerIamRole
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-ChefServer-Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        # Allow all actions to one bucket (the supplied one, or the one you provided)
        - Action: s3:*
          Effect: Allow
          Resource:
            - !Join ['', [ 'arn:aws:s3:::', !If [CreateChefSecretsBucket, !Ref ChefBucket, !Ref ChefSecretsBucket] ]]
            - !Join ['', [ 'arn:aws:s3:::', !If [CreateChefSecretsBucket, !Ref ChefBucket, !Ref ChefSecretsBucket], '/*' ]]
        # Allow ability to list all buckets
        - Action: s3:List*
          Effect: Allow
          Resource: arn:aws:s3:::*
        # Allow instances to read their own tags (needed for setup script below)
        - Action: ec2:DescribeTags
          Effect: Allow
          Resource: "*"
        - Action: cloudwatch:PutMetricData
          Effect: Allow
          Resource: "*"
        - Action: cloudwatch:GetMetricStatistics
          Effect: Allow
          Resource: "*"
        - Action: cloudwatch:ListMetrics
          Effect: Allow
          Resource: "*"
        - Action: logs:*
          Effect: Allow
          Resource: arn:aws:logs:*.*.*
      Roles:
      - !Ref ChefRole

  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Chef Frontend
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      SecurityGroupIngress:
      - FromPort: '80'
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        ToPort: '80'
      - FromPort: '443'
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        ToPort: '443'
      - FromPort: '22'
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref SSHSecurityGroup
        ToPort: '22'
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-FE-SG
      VpcId: !Ref VPC

  LoadBalancerSecurityGroup:
    Properties:
      GroupDescription: Setup Ingress/Egress for Chef Frontend Load Balancer
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: '0'
        IpProtocol: tcp
        ToPort: '65535'
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp: 0.0.0.0/0
        FromPort: '443'
        IpProtocol: tcp
        ToPort: '443'
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ELB-SG
      VpcId: !Ref VPC
    Type: AWS::EC2::SecurityGroup

  PrimaryElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '90'
        Target: HTTP:80/_status
        Timeout: '60'
        UnhealthyThreshold: '10'
      LBCookieStickinessPolicy:
      - CookieExpirationPeriod: '3600'
        PolicyName: PublicELBCookieStickinessPolicy
      Listeners:
      - InstancePort: 80
        InstanceProtocol: HTTP
        LoadBalancerPort: '443'
        PolicyNames:
        - PublicELBCookieStickinessPolicy
        Protocol: HTTPS
        SSLCertificateId: !Ref SSLCertificateARN
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref LoadBalancerSubnets
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-elb
      - Key: X-Dept
        Value: success
      - Key: X-Contact
        Value: !Ref ContactEmail

  ServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      EbsOptimized: true
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeSize: 20
          VolumeType: gp2
          DeleteOnTermination: true
      IamInstanceProfile: !Ref ChefInstanceProfile
      ImageId: !FindInMap
        - AWSRegion2AMI
        - !Ref AWS::Region
        - centos
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
      - !Ref FrontendSecurityGroup
      - !Ref SSHSecurityGroup
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash -x
          function error_exit {
            /opt/aws/bin/cfn-signal -e 1 -r \$1\ '${WaitHandle}'
            exit 1
          }
          export -f error_exit
          # Execute AWS::CloudFormation::Init
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ServerLaunchConfig --region ${AWS::Region}
          # All is well so signal success and let CF know wait function is complete
          /opt/aws/bin/cfn-signal -e 0 -r "Server setup complete" '${WaitHandle}'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            rpm:
              chef-server-core: https://packages.chef.io/files/current/chef-server/12.13.1+20170221210120/el/7/chef-server-core-12.13.1+20170221210120-1.el7.x86_64.rpm
              chef-manage: https://packages.chef.io/stable/el/7/chef-manage-2.4.4-1.el7.x86_64.rpm
            yum:
              perl: []
              perl-Switch: []
              perl-DateTime: []
              perl-Sys-Syslog: []
              perl-LWP-Protocol-https: []
              perl-Digest-SHA: []
              zip: []
              unzip: []
          files:
            /etc/chef-manage/manage.rb:
              content: !Sub
                disable_sign_up ${DisableSignup}
            /etc/opscode/chef-server.rb:
              content: !Sub |
                api_fqdn '${PrimaryElasticLoadBalancer.DNSName}'.downcase
                nginx['enable_non_ssl'] = true
                license['nodes'] = ${LicenseCount}
                postgresql['external'] = true
                postgresql['vip'] = '${DBPostgres.Endpoint.Address}'
                postgresql['db_superuser'] = '${DBUser}'
                postgresql['db_superuser_password'] = '${DBPassword}'
                oc_chef_authz['http_init_count'] = 100
                oc_chef_authz['http_queue_max'] = 200
                opscode_erchef['authz_pooler_timeout'] = 2000
                oc_bifrost['db_pool_init'] = 10
                oc_bifrost['db_pool_max'] = 20
                oc_bifrost['db_pool_queue_max'] = 40
                opscode_erchef['depsolver_worker_count'] = 4
                opscode_erchef['depsolver_timeout'] = 20000
                opscode_erchef['db_pool_init'] = 10
                opscode_erchef['db_pool_max'] = 20
                opscode_erchef['db_pool_queue_max'] = 40
                opscode_erchef['nginx_bookshelf_caching'] = :on
                opscode_erchef['s3_url_expiry_window_size'] = '100%'
                opscode_erchef['search_provider'] = 'elasticsearch'
                opscode_erchef['search_queue_mode'] = 'batch'
                opscode_solr4['external'] = true
                opscode_solr4['external_url'] = 'https://${ElasticsearchDomain.DomainEndpoint}'
                opscode_solr4['elasticsearch_shard_count'] = ${ElasticSearchShardCount}
                opscode_solr4['elasticsearch_replica_count'] = ${ElasticSearchReplicaCount}
                bookshelf['storage_type'] = :sql
                rabbitmq['enable'] = false
                rabbitmq['management_enabled'] = false
                rabbitmq['queue_length_monitor_enabled'] = false
                opscode_expander['enable'] = false
                dark_launch['actions'] = false
          commands:
            01_configure_chef_server:
              command: !Sub |
                # Determine if we are the bootstrap node
                INSTANCE_ID=`curl -s http://169.254.169.254/latest/meta-data/instance-id`
                BOOTSTRAP_TAGS=`aws ec2 describe-tags --region ${AWS::Region} --filter "Name=resource-id,Values=$INSTANCE_ID" --output=text | grep BootstrapAutoScaleGroup`
                STACKNAME=${AWS::StackName}
                EXISTING_BOOTSTRAP=`aws s3 ls s3://${!BUCKET}/${!STACKNAME}`
                EXISTING_OPSCODE_DIR=`echo $EXISTING_BOOTSTRAP | grep etc`
                EXISTING_MIGRATION_LEVEL=`echo $EXISTING_BOOTSTRAP | grep migration`
                # Determine if we're using a generated bucket or a provided bucket THE HARD WAY because intrinsic functions don't seem to work
                # https://forums.aws.amazon.com/thread.jspa?threadID=242702
                if [ -n "${ChefBucket}" ]; then
                  # If we generated a bucket, then the ChefBucket variable should exist otherwise it is empty
                  echo "[INFO] Using the generated S3 Bucket ${ChefBucket}"
                  BUCKET=${ChefBucket}
                elif [ -n "${ChefSecretsBucket}" ]; then
                  # Otherwise a ChefSecretsBucket was provided so we'll use that
                  echo "[INFO] Using the provided S3 Bucket ${ChefSecretsBucket}"
                  BUCKET=${ChefSecretsBucket}
                fi
                # If we're not bootstrap or we are a bootstrap with existing secrets,
                # sync down the rest of the secrets first before reconfiguring
                if [[ -z "${!BOOTSTRAP_TAGS}" || -n "${!EXISTING_BOOTSTRAP}" ]]; then
                  echo "[INFO] configuring this node as a regular Chef frontend"
                  # I am either not a bootstrap, or a bootstrap using existing synced opscode data
                  if [ -z "${!BOOTSTRAP_TAGS" || -z "${!EXISTING_OPSCODE_DIR}" ]] then
                    aws s3 sync s3://${!BUCKET}/${!STACKNAME}/etc_opscode /etc/opscode
                  fi
                  # I am either not a bootstrap, or a bootstrap using existing synced migration data
                  if [ -z "${!BOOTSTRAP_TAGS" || -z "${!EXISTING_MIGRATION_LEVEL}" ]] then
                    mkdir -p /var/opt/opscode/upgrades
                    touch /var/opt/opscode/bootstrapped
                    aws s3 cp s3://${!BUCKET}/${!STACKNAME}/migration-level /var/opt/opscode/upgrades/
                else
                  echo "[INFO] configuring this node as a Bootstrap Chef frontend"
                fi
                # Configure the chef server
                chef-server-ctl reconfigure --accept-license
                chef-manage-ctl reconfigure --accept-license
                # the bootstrap instance should sync files after reconfigure
                # unless it is a bootstrap using existing secrets.
                if [[ -n "${!BOOTSTRAP_TAGS}" && -z "${!EXISTING_BOOTSTRAP}" ]]; then
                  echo "[INFO] syncing secrets up to S3"
                  # I am a bootstrap without existing existing opscode data synced to s3
                  if [ -n "${!BOOTSTRAP_TAGS" && -z "${!EXISTING_OPSCODE_DIR}" ]] then
                    aws s3 sync /etc/opscode s3://${!BUCKET}/${!STACKNAME}/etc_opscode
                  fi
                  # I am a bootstrap without existing existing migration data sycned to s3
                  if [ -z "${!BOOTSTRAP_TAGS" && -z "${!EXISTING_MIGRATION_LEVEL}" ]] then
                    aws s3 cp /var/opt/opscode/upgrades/migration-level s3://${!BUCKET}/${!STACKNAME}/
                  fi
                fi
            02_configure_cloudwatch_monitoring:
              command: !Sub |
                mkdir /opt/cloudwatch_monitoring
                cd /opt/cloudwatch_monitoring
                curl http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip -O
                unzip CloudWatchMonitoringScripts-1.2.1.zip
                rm CloudWatchMonitoringScripts-1.2.1.zip
                crontab -l | { cat; echo "*/5 * * * * /opt/cloudwatch_monitoring/aws-scripts-mon/mon-put-instance-data.pl --auto-scaling --mem-util --disk-space-util --disk-path=/ --from-cron"; } | crontab -

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: ServerLaunchConfig
    Properties:
      Handle: !Ref WaitHandle
      Timeout: '1500'

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

#########################################################################################
# PostgreSQL DB
#########################################################################################
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Frontend Access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          SourceSecurityGroupId: !Ref FrontendSecurityGroup

  DBSubnetGroup:
    Condition: CreateDBSubnetGroup
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS DB subnet group
      SubnetIds: !Ref ChefServerSubnets

  DBPostgres:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: "Snapshot"
    Properties:
      DBName: !Ref DBName
      AllocatedStorage: !Ref DBAllocatedStorage
      Iops: !Ref DBIops
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: !Ref DBInstanceClass
      StorageType: io1
      MultiAZ: true
      Engine: postgres
      EngineVersion: 9.5.4
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 35
      DBSubnetGroupName: !If [CreateDBSubnetGroup, !Ref DBSubnetGroup, !Ref DBSubnetGroupArn]
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-pgdb
        - Key: X-Dept
          Value: success
        - Key: X-Contact
          Value: !Ref ContactEmail

#########################################################################################
# ElasticSearch
#########################################################################################
  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      ElasticsearchVersion: 2.3
      ElasticsearchClusterConfig:
        InstanceCount: !Sub ${ElasticSearchShardCount}
        ZoneAwarenessEnabled: false
        InstanceType: m3.large.elasticsearch
        DedicatedMasterEnabled: false
        # DedicatedMasterType: t2.medium.elasticsearch
        # DedicatedMasterCount: "3"
      # EBSOptions:
      #   EBSEnabled: true
      #   Iops: !Ref DBIops
      #   VolumeSize: !Ref DBAllocatedStorage
      #   VolumeType: io1
      SnapshotOptions:
        AutomatedSnapshotStartHour: "0"
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "es:*"
            Condition:
              IpAddress:
                "aws:sourceIp": !Ref NatGatewayIPs
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: "true"
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ES
      - Key: X-Dept
        Value: success
      - Key: X-Contact
        Value: !Ref ContactEmail


#########################################################################################
# Monitoring
#########################################################################################
  AlertNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            !Ref ContactEmail
          Protocol: email

  DiskSpaceUtilization:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName : DiskSpaceUtilization
      AlarmDescription : Alarms when an disk utilization reaches a specified threshold.
      AlarmActions : [!Ref AlertNotificationTopic]
      MetricName : DiskSpaceUtilization
      Namespace : System/Linux
      ComparisonOperator : GreaterThanOrEqualToThreshold
      EvaluationPeriods : 2
      Period : 300
      Statistic : Average
      Threshold : 90
      Unit: Percent

  MemoryUtilization:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName : MemoryUtilization
      AlarmDescription : Alarms when an memory utilization reaches a specified threshold.
      AlarmActions : [!Ref AlertNotificationTopic]
      MetricName : MemoryUtilization
      Namespace : System/Linux
      ComparisonOperator : GreaterThanOrEqualToThreshold
      EvaluationPeriods : 2
      Period : 300
      Statistic : Average
      Threshold : 80
      Unit: Percent

  ELB5XXExceeded:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName : ELB_5XX_Exceeded
      AlarmDescription : Alarms when an 5xx requests exceed a specified threshold.
      AlarmActions : [!Ref AlertNotificationTopic]
      MetricName : HTTPCode_ELB_5XX
      Namespace : AWS/ELB
      ComparisonOperator : GreaterThanOrEqualToThreshold
      EvaluationPeriods : 1
      Period : 300
      Statistic : Sum
      Threshold : 10
      Dimensions:
        -
          Name: LoadBalancerName
          Value: !Ref PrimaryElasticLoadBalancer

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName : CPUAlarmHigh
      AlarmDescription : Scale up when CPU > 60% for 10 minutes
      AlarmActions : [!Ref FrontendAutoScaleUpPolicy]
      MetricName : CPUUtilization
      Namespace : AWS/EC2
      ComparisonOperator : GreaterThanOrEqualToThreshold
      EvaluationPeriods : 2
      Period : 300
      Statistic : Average
      Threshold : 60
      Dimensions:
        -
          Name: AutoScalingGroupName
          Value: !Ref FrontendAutoScaleGroup

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName : CPUAlarmLow
      AlarmDescription : Scale down when CPU < 50% for 10 minutes
      AlarmActions : [!Ref FrontendAutoScaleDownPolicy]
      MetricName : CPUUtilization
      Namespace : AWS/EC2
      ComparisonOperator : GreaterThanOrEqualToThreshold
      EvaluationPeriods : 2
      Period : 300
      Statistic : Average
      Threshold : 50
      Dimensions:
        -
          Name: AutoScalingGroupName
          Value: !Ref FrontendAutoScaleGroup

  RDSWriteLatency:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName : RDSWriteLatency
      AlarmDescription : Alarm when RDS write latency is greater than 500ms.
      AlarmActions : [!Ref AlertNotificationTopic]
      MetricName : WriteLatency
      Namespace : AWS/RDS
      ComparisonOperator : GreaterThanOrEqualToThreshold
      EvaluationPeriods : 1
      Period : 300
      Statistic : Average
      Threshold : 500
      Dimensions:
        -
          Name: DBInstanceIdentifier
          Value: !Ref DBPostgres

  RDSReadLatency:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName : RDSReadLatency
      AlarmDescription : Alarm when RDS write latency is greater than a 500ms.
      AlarmActions : [!Ref AlertNotificationTopic]
      MetricName : ReadLatency
      Namespace : AWS/RDS
      ComparisonOperator : GreaterThanOrEqualToThreshold
      EvaluationPeriods : 1
      Period : 300
      Statistic : Average
      Threshold : 500
      Dimensions:
        -
          Name: DBInstanceIdentifier
          Value: !Ref DBPostgres

  ESClusterRed:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName : ESClusterRed
      AlarmDescription : Alarm when both primary and replica shards are down.
      AlarmActions : [!Ref AlertNotificationTopic]
      MetricName : ClusterStatus.red
      Namespace : AWS/ES
      ComparisonOperator : GreaterThanOrEqualToThreshold
      EvaluationPeriods : 1
      Period : 300
      Statistic : Minimum
      Threshold : 1
      Dimensions:
        -
          Name: DomainName
          Value: !Ref ElasticsearchDomain
        -
          Name: ClientId
          Value: !Ref AWS::AccountId


  ESClusterYellow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName : ESClusterYellow
      AlarmDescription : Alarm when replica shards are down for 15 minutes.
      AlarmActions : [!Ref AlertNotificationTopic]
      MetricName : ClusterStatus.yellow
      Namespace : AWS/ES
      ComparisonOperator : GreaterThanOrEqualToThreshold
      EvaluationPeriods : 3
      Period : 300
      Statistic : Minimum
      Threshold : 1
      Dimensions:
        -
          Name: DomainName
          Value: !Ref ElasticsearchDomain
        -
          Name: ClientId
          Value: !Ref AWS::AccountId

  ESFreeStorageSpace:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName : ESFreeStorageSpace
      AlarmDescription : Alarm when free storage space on any node falls below threshold.
      AlarmActions : [!Ref AlertNotificationTopic]
      MetricName : FreeStorageSpace
      Namespace : AWS/ES
      ComparisonOperator : LessThanOrEqualToThreshold
      EvaluationPeriods : 1
      Period : 300
      # Reports when any node in the cluster falls below the threshold.
      Statistic : Minimum
      Threshold : 5000
      Dimensions:
        -
          Name: DomainName
          Value: !Ref ElasticsearchDomain
        -
          Name: ClientId
          Value: !Ref AWS::AccountId

  ESCPUUtilization:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName : ESCPUUtilization
      AlarmDescription : Alarm when all nodes' average CPU load passes threshold.
      AlarmActions : [!Ref AlertNotificationTopic]
      MetricName : CPUUtilization
      Namespace : AWS/ES
      ComparisonOperator : GreaterThanOrEqualToThreshold
      EvaluationPeriods : 2
      Period : 300
      Statistic : Average
      Threshold : 80
      Unit: Percent
      Dimensions:
        -
          Name: DomainName
          Value: !Ref ElasticsearchDomain
        -
          Name: ClientId
          Value: !Ref AWS::AccountId

  ESJVMMemoryPressure:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName : ESJVMMemoryPressure
      AlarmDescription : Alarm when maximum percentage of the Java heap used for all data nodes in the cluster exceeds threshold.
      AlarmActions : [!Ref AlertNotificationTopic]
      MetricName : JVMMemoryPressure
      Namespace : AWS/ES
      ComparisonOperator : GreaterThanOrEqualToThreshold
      EvaluationPeriods : 2
      Period : 300
      Statistic : Maximum
      Threshold : 90
      Unit: Percent
      Dimensions:
        -
          Name: DomainName
          Value: !Ref ElasticsearchDomain
        -
          Name: ClientId
          Value: !Ref AWS::AccountId

Outputs: {}
